*********************************************************************
*                                                                   *
*      php-prototype                                                *
*      Prototype programming interface.                             *
*                                                                   *
*      By Francis Lacroix <f@quotient.ca>                           *
*      All rights reserved (c) Override Logic Technologies 2011-    *
*                                                                   *
*********************************************************************

0. LICENSE
-----------
This work is provided as-is. The author is not responsible for the
usage of this library or the damages it may cause in any way.

This work is licensed under the GNU Lesser General Public License V3,
bundled with this software.

You are free to modify, use or distribute this work as much you wish. As
long as you follow the terms of the license. Please credit the original
authors as of courtesy and keep the license in the package. 

Enjoy!

 

1. CHANGELOG
-------------
 - 1.0 : Initial draft.


 
2. GETTING STARTED
-------------------
This library provides a way to do prototype-based programming in PHP.
The library may be not perfect right now, but I'm still working on it.

More specifically, it provides the following:
 - Use of PHP closures as "objects"
 - Dynamic modification of these objects
 - Prototype cloning
 - Multiple inherited prototypes
 - Scope resolution (this, parent, etc.)
 - Type checking
 - No use of shady constructs like eval()
 
However, due to limitations in the PHP core, this library relies on a
global state (static variable) to work properly. In the case of multi-
threading, which PHP does not support, this wouldn't work as expected.
However, multi-threaded support for PHP is not available, and it probably
not going to be without rewriting the whole thing.



3. BASIC USAGE
---------------
There are two interfaces that can be used for this library. The
object-oriented interface and the procedural interface.

The former prevents function name collisions while the second alleviates
the code, since the constructs and function names are shorter.

To instantiate a prototype object, using the object-oriented interface:

    <?php
    include 'proto.class.php';
    
    $myProto = new PHPProto(function(){
        echo 'Hello World!';
    });
    $myProto();
    ?>

The same can be done with the proto() function:

    <?php
    include 'proto.inc.php';
    
    $myProto = proto(function(){
        echo 'Hello World!';
    });                    
    $myProto();
    ?>



4. SCOPE RESOLUTION
--------------------
Properties can be assigned to the current protype with the use of the
PHPProto::this() method (in the OO interface) or the this() function
(in the procedural interface):

    <?php
    $myProto = proto(function(){
        PHPProto::this()->foo = 'bar';
        this()->foo = 'bar'; // same as above
    });
    ?>

Of course, it is possible to nest closures. It is not necessary to use
the proto() construct there, since closures will be automatically
converted. 

It is possible to access the structure using the parent() method or function:

    <?php
    $myProto = proto(function(){
        this()->foo = 'bar';
        this()->echofoo = function(){
            echo PHPProto::this()->parent()->foo;
            echo parent()->foo; // same as above
        };
    });
    $myProto->echofoo();
    ?>

You can nest as many as you want:

    <?php
    $myProto = proto(function(){
        this()->second = function(){
            this()->third = function(){
                echo 'Hello World!';
            };
        };
    });
    $myProto->second->third();
    ?>

Keep in mind that calling third() will also call the base $myProto()
function and the two() function as well (see Autoloading).


                          
5. AUTOLOADING
---------------
In the above example, $myProto->foo existed when $myProto->echofoo() was
called because of the autoloading. The autoloader, enabled by default, will
call the parents of a closure to make sure that it is properly defined.

Per example, with the autoloader disabled:

    <?php
    $myProto = proto(function(){
        this()->foo = 'bar';
        this()->echofoo = function(){
            echo parent()->foo;
        };
    });
    PHPProto::$autoload = false;
    $myProto->echofoo(); // echofoo is not defined
    
    $myProto();
    $myProto->echofoo(); // echofoo is defined now
    ?>

Obviously, if your base closure requires arguments, you will have to call
it manually, but you don't have to disable the autoloader, as long as you
call the base first:

    <?php
    $myProto = proto(function($foo){
        this()->foo = $foo;
    });
    $myProto('bar');
    echo $myProto->foo;
    ?>



6. CLONING
-----------
Cloning can be useful for creating a base prototype and using it multiple
times:

    <?php
    $myProto = proto(function($foo){
        this()->foo = $foo;
        return this();
    });
    
    $proto1 = clone $myProto('bar');
    $proto2 = clone $myProto('baz');
    echo $proto1->foo; // bar
    echo $proto2->foo; // baz
    ?>



7. PROTOTYPING
---------------
You can have the prototype inherit one or multiple prototypes using the
__proto__() method (in the OO interface) or the proto() function (in the
procedural interface):

    <?php
    $protoA = proto(function(){
        this()->foo = 'bar';
    });
    $protoB = proto(function() use($protoA){
        this()->__proto__($protoA);
        proto($protoA); // same as above
        
        echo this()->foo; // prints bar
    });
    ?>

The deeper variables will shadow the inherited ones:

    <?php
    $protoA = proto(function(){
        this()->foo = 'bar';
    });
    $protoB = proto(function() use($protoA){
        proto($protoA);
        this()->foo = 'baz';
    });
    echo $protoB->foo; // prints baz
    ?>

Inheritance, by default, will make a deep copy of the inherited prototype:

    <?php
    $protoA = proto(function(){
        this()->foo = 'bar';
    });
    $protoB = proto(function() use($protoA){
        proto($protoA);
        this()->foo = 'baz';
    });
    echo $protoB->foo; // prints baz
    echo $protoA->foo; // prints bar
    ?>

Multiple inheritance is also possible:

    <?php
    $protoA = proto(function(){
        this()->foo = 'bar';
    });
    $protoB = proto(function(){
        this()->hello = 'world';
    });
    $protoC = proto(function() use($protoA, $protoB){
        proto($protoA);
        proto($protoB);
        echo this()->foo;   // prints bar
        echo this()->hello; // prints world
    });
    ?>

The last loaded prototype has priority over the first in regards to
variable access.



8. TYPING
----------
You can set types for objects by using the __type__() method (in the OO
interface) or the $type argument (in the procedural interface):

    <?php
    $myProto = new PHPProto(function(){});
    $myProto->__type__('hello');
    
    $myProto = proto(function(){}, 'hello'); // same as above
    ?>

Once the prototype has a defined type, you can retrieve it or check it:

    <?php
    // OO interface
    $myProto = proto(function(){}, 'hello');
    var_dump($myProto->__oftype__('hello')); // true
    var_dump($myProto->__oftype__('world')); // false
    var_dump($myProto->__typeof__());        // array('hello');
    
    // Procedural interface
    $myProto = proto(function(){}, 'hello');
    var_dump(oftype('hello', $myProto));     // true
    var_dump(oftype('world', $myProto));     // false
    var_dump(typeof($myProto));              // array('hello')
    ?>

Of course, a prototype can have multiple types:

    <?php
    $protoA = proto(function(){}, 'A');
    $protoB = proto(function(){}, 'B');
    $protoC = proto(function() use($protoA, $protoB){
        proto($protoA);
        proto($protoB);
    }, 'C');
    
    var_dump(oftype('A', $protoC)); // true
    var_dump(oftype('B', $protoC)); // true
    var_dump(oftype('C', $protoC)); // true
    var_dump(typeof($protoC));      // array('A', 'B', 'C')
    ?>



9. DYNAMIC MODIFICATION
------------------------
You can dynamically modify a prototype functions:

    <?php
    $myProto = proto(function(){
        this()->printmsg = function(){
             echo 'Hello World!';
        };
    });
    $myProto->printmsg(); // prints Hello World!
    
    $myProto->printmsg = function(){
        echo 'Foobar!';
    };
    $myProto->printmsg(); // prints Foobar!
    ?>


    
10. SAMPLE
-----------
Checkout the example.php file for a working example.
